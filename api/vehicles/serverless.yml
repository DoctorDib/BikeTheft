service: service-vehicles

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-2
  profile: BTP
  stage: prod
  vpc:
    securityGroupIds:
      - sg-92c883f5
    subnetIds:
      - subnet-41ed773b
      - subnet-653e9729
      - subnet-ca7826a3

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc connetion.
        Roles:
          - {"Ref": "IamRoleLambdaExecution"}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource: "*"

custom:
  domains:
    prod: api.lostmywheels.com
    dev: dev-api.lostmywheels.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    certificateName: '*.lostmywheels.com'
    basePath: 'vehicles'
    stage: ${self:custom.stage}
    createRoute53Record: true
  stage: ${opt:stage, self:provider.stage}
  dotenv:
    basePath: '../'
    logging: false
  cors:
    origins:
      - '*'

functions:
  new:
    handler: vehicles.new
    events:
      - http:
          path: new
          method: POST
          cors: {$self:custom.cors}
          authorizer: aws_iam
  get_vehicle:
    handler: vehicles.get_vehicle
    events:
      - http:
          path: get_vehicle
          method: POST
          cors: {$self:custom.cors}
  ping:
    handler: vehicles.ping
    events:
      - http:
          path: ping
          method: POST
          cors: {$self:custom.cors}
  update_vehicle_stat:
    handler: vehicles.update_vehicle_stat
    events:
      - http:
          path: update_vehicle_stat
          method: POST
          cors: {$self:custom.cors}
  get_dvla:
    handler: vehicles.get_dvla_data
    events:
      - http:
          path: dvla
          method: POST
          cors: { $self:custom.cors }
